name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      # -----------------------
      # Static analysis
      # -----------------------
      - name: Vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Staticcheck (exclude examples)
        run: |
          set -euo pipefail
          PKGS=$(go list ./... | grep -v /examples)
          [ -n "$PKGS" ] && staticcheck $PKGS || echo "No packages to check"

      # -----------------------
      # Security scans (Ubuntu only, push only)
      # -----------------------
      - name: Install gosec
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run gosec (static analysis)
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        run: $(go env GOPATH)/bin/gosec -no-fail -fmt=json -out=gosec-report.json ./...

      - name: Upload gosec report
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: gosec-report
          path: gosec-report.json

      - name: Install govulncheck
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        run: govulncheck -json ./... > govuln-report.json || true

      - name: Upload govulncheck report
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: govulncheck-report
          path: govuln-report.json

      - name: Trivy Scan (Go dependencies only)
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          vuln-type: go
          scanners: vuln
          format: json
          output: trivy-report.json

      - name: Upload Trivy report
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      # -----------------------
      # Build & Test
      # -----------------------
      - name: Build CLI
        run: go build -trimpath -ldflags "-s -w" -o /tmp/freader ./cmd/freader

      - name: Run tests (exclude examples)
        run: |
          set -euo pipefail
          PKGS=$(go list ./... | grep -v /examples)
          [ -n "$PKGS" ] && go test -race -covermode=atomic -coverprofile="coverage.out" $PKGS || echo "No packages to test"

      - name: Show coverage summary
        run: go tool cover -func=coverage.out | tail -n 1

      - name: Upload coverage artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: coverage.out

      # -----------------------
      # Coverage badge (Ubuntu push only)
      # -----------------------
      - name: Extract coverage percentage
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        id: coverage
        run: |
          LINE=$(go tool cover -func=coverage.out | tail -n 1)
          PCT=$(echo "$LINE" | awk '{print $3}')
          PCT_NUM=${PCT%%%}
          if [ "${PCT_NUM%.*}" -ge 80 ]; then COLOR=brightgreen; elif [ "${PCT_NUM%.*}" -ge 60 ]; then COLOR=yellow; else COLOR=red; fi
          echo "COVERAGE=$PCT_NUM" >> "$GITHUB_ENV"
          echo "BADGE_COLOR=$COLOR" >> "$GITHUB_ENV"

      - name: Prepare Shields JSON (coverage)
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p shields
          cat > shields/coverage.json <<EOF
          {
            "schemaVersion": 1,
            "label": "coverage",
            "message": "${COVERAGE}%",
            "color": "${BADGE_COLOR}"
          }
          EOF

      - name: Publish Shields (coverage)
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: shields
          destination_dir: shields
          keep_files: true
          commit_message: "chore(ci): publish coverage badge"

      # -----------------------
      # Trivy badge (Ubuntu push only)
      # -----------------------
      - name: Download Trivy report
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: .

      - name: Prepare Shields JSON (trivy)
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p shields
          CRITICAL=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json)
          HIGH=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json)
          MEDIUM=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-report.json)
          LOW=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-report.json)

          TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))

          if [ $((CRITICAL + HIGH)) -gt 0 ]; then
            COLOR=red
          elif [ $MEDIUM -gt 0 ]; then
            COLOR=yellow
          else
            COLOR=brightgreen
          fi

          echo "{\"schemaVersion\":1,\"label\":\"Trivy\",\"message\":\"$TOTAL\",\"color\":\"$COLOR\"}" > shields/trivy.json

      - name: Publish Shields (trivy)
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: shields
          destination_dir: shields
          keep_files: true
          commit_message: "chore(ci): publish Trivy badge"
