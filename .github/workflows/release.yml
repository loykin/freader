name: Release on tag (multi-platform binaries)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  precheck:
    name: Validate tag and run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # need full history to verify ancestry

      - name: Validate tag format (vMAJOR.MINOR.PATCH)
        shell: bash
        run: |
          set -euo pipefail
          TAG_REF="${GITHUB_REF#refs/tags/}"
          echo "Validating tag format: $TAG_REF"
          if [[ ! "$TAG_REF" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Tag must match vMAJOR.MINOR.PATCH (e.g., v0.1.0). Given: $TAG_REF"
            exit 1
          fi

      - name: Ensure tag is on main branch history
        shell: bash
        run: |
          set -euo pipefail
          TAG_REF="${GITHUB_REF#refs/tags/}"
          echo "Verifying tag $TAG_REF is on main..."

          # Resolve the tagged commit
          COMMIT_SHA=$(git rev-list -n 1 "$TAG_REF")
          echo "Tag commit: $COMMIT_SHA"

          # Fetch main and verify ancestry
          git fetch --quiet origin main
          if git merge-base --is-ancestor "$COMMIT_SHA" origin/main; then
            echo "Tag $TAG_REF is contained in main's history. Proceeding."
          else
            echo "Tag $TAG_REF is NOT on main branch history. Failing to prevent release."
            exit 1
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Run tests
        run: go test ./...

  build:
    name: Build binaries (${{ matrix.goos }}/${{ matrix.goarch }})
    runs-on: ubuntu-latest
    needs: precheck
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          OUT="freader_${{ matrix.goos }}_${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then OUT="${OUT}.exe"; fi
          go build -trimpath -ldflags "-s -w" -o "dist/${OUT}" ./cmd/freader

      - name: Package
        run: |
          set -e
          mkdir -p artifacts
          BASE="freader_${{ github.ref_name }}_${{ matrix.goos }}_${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            cp dist/freader_${{ matrix.goos }}_${{ matrix.goarch }}.exe freader.exe
            zip -9 "artifacts/${BASE}.zip" freader.exe README.md LICENSE config/config.toml
          else
            cp dist/freader_${{ matrix.goos }}_${{ matrix.goarch }} freader
            tar -czf "artifacts/${BASE}.tar.gz" freader README.md LICENSE config/config.toml
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.goos }}_${{ matrix.goarch }}
          path: artifacts/*

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten and checksum
        shell: bash
        run: |
          set -e
          cd artifacts
          # move files from per-artifact subfolders into current folder
          find . -mindepth 2 -type f -print0 | xargs -0 -I {} mv {} .
          # clean up empty directories
          find . -mindepth 1 -type d -empty -delete
          sha256sum * > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
